buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.grails.plugins:hibernate5:7.1.0"
    }
}

ext {
    grailsApps = ['app']
    grailsPlugins = ['plugin']
}

subprojects { project ->
    boolean isGrailsApp = grailsApps.contains(project.name)
    boolean isGrailsPlugin = grailsPlugins.contains(project.name)
    boolean isGrailsProject = isGrailsApp || isGrailsPlugin

    if ( isGrailsProject ) {
        apply plugin:"eclipse"
        apply plugin:"idea"

        if ( isGrailsApp ) {
            apply plugin:"war"
            apply plugin:"org.grails.grails-web"
            apply plugin:"org.grails.grails-gsp"
            apply plugin:"com.bertramlabs.asset-pipeline"
        }

        repositories {
            mavenLocal()
            maven { url "https://repo.grails.org/grails/core" }
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                content {
                    includeVersionByRegex('io\\.micronaut.*', '.*', '.*BUILD-SNAPSHOT')
                }
            }

        }

        dependencies {
            implementation "org.springframework.boot:spring-boot-starter-logging"
            implementation "org.springframework.boot:spring-boot-autoconfigure"
            implementation "org.grails:grails-core"
            console "org.grails:grails-console"
        }

        if ( isGrailsApp ) {
            configurations {
                developmentOnly
                runtimeClasspath {
                    extendsFrom developmentOnly
                }
            }

            dependencies {
                developmentOnly("org.springframework.boot:spring-boot-devtools")
                implementation "org.springframework.boot:spring-boot-starter-actuator"
                implementation "org.springframework.boot:spring-boot-starter-tomcat"
                implementation "org.grails:grails-dependencies"
                implementation "org.grails:grails-web-boot"
                implementation "org.grails.plugins:cache"
                implementation "org.grails.plugins:scaffolding"
                implementation "org.grails.plugins:hibernate5"
                implementation "org.hibernate:hibernate-core:5.4.0.Final"
                implementation "io.micronaut:micronaut-inject-groovy"
                profile "org.grails.profiles:web"
                runtimeOnly "org.glassfish.web:el-impl:2.1.2-b03"
                runtimeOnly "com.h2database:h2"
                runtimeOnly "org.apache.tomcat:tomcat-jdbc"
                runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
                testImplementation "org.grails:grails-gorm-testing-support"
                testImplementation "org.grails:grails-web-testing-support"
            }
            apply from: "${rootProject.projectDir}/gradle/geb.gradle"
        }

        if ( isGrailsPlugin ) {
            dependencies {
                profile "org.grails.profiles:plugin"
                implementation "org.grails:grails-plugin-services"
                implementation "org.grails:grails-plugin-domain-class"
                testImplementation "org.grails:grails-gorm-testing-support"
            }
        }

        bootRun {
            jvmArgs(
                    '-Dspring.output.ansi.enabled=always',
                    '-noverify',
                    '-XX:TieredStopAtLevel=1',
                    '-Xmx1024m')
            sourceResources sourceSets.main
        }

        if (isGrailsApp) {

            tasks.withType(Test) {
                systemProperty "geb.env", System.getProperty('geb.env')
                systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
            }
        }

        if ( isGrailsPlugin ) {
            // enable if you wish to package this plugin as a standalone application
            bootJar.enabled = false
            grailsPublish {
                // TODO: Provide values here
                user = 'user'
                key = 'key'
                githubSlug = 'foo/bar'
                license {
                    name = 'Apache-2.0'
                }
                title = "My Plugin"
                desc = "Full plugin description"
                developers = [johndoe:"John Doe"]
                portalUser = ""
                portalPassword = ""
            }
        }
    }
}

tasks.withType(Test) { useJUnitPlatform() }
